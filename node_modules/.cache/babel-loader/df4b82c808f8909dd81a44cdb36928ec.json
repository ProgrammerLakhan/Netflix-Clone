{"ast":null,"code":"var _jsxFileName = \"/home/lakhan/Desktop/Lakhan/netflix-clone/src/Components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport requests from '../request';\nimport \"../css/Row.css\";\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); // A snippet of code which runs based on specific conditions/variables\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); //run only when the page load\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //https://developers.google.com/youtube/player_parameters,\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n        console.log(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"PJD8XGe3+ikEevBMWgthFjVZ1wI=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/lakhan/Desktop/Lakhan/netflix-clone/src/Components/Row.js"],"names":["React","useState","useEffect","YouTube","axios","requests","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","error","map","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport requests from '../request';\nimport \"../css/Row.css\";\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl,isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\n    // A snippet of code which runs based on specific conditions/variables\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results)\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]); //run only when the page load\n\n    const opts = {\n        height:\"390\",\n        width:\"100%\",\n        playerVars:{\n            //https://developers.google.com/youtube/player_parameters,\n            autoplay:1,\n        },\n    };\n\n    \n\n    const handleClick = (movie) => {\n        if(trailerUrl){\n            setTrailerUrl(\"\");\n        }else{\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n                console.log(urlParams.get('v'));\n            })\n            .catch((error)=>console.log(error));\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={()=>handleClick(movie)}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}    \n                        src={`${base_url}${isLargeRow?movie.poster_path : movie.backdrop_path}`} \n                        alt={movie.name} \n                    />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row\n\n"]},"metadata":{},"sourceType":"module"}